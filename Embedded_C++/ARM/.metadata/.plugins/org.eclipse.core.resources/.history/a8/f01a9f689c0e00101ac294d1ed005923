/**
 * @file std_type.hpp
 * @author Ziad Mohammed Fathy
 * @brief This file defines various types, constants, and inline functions used in embedded systems programming.
 * @version 0.1
 * @date 2025-03-31
 */

#ifndef _LIB_STD_TYPE_HPP_
#define _LIB_STD_TYPE_HPP_

/* ------------ includes ------------ */
#include <stdint.h>
#include "stm32f103xx.hpp"

namespace StdType {
    /**
     * @brief Define custom data types for unsigned integers of 8, 16, 32, and 64 bits.
     */
    typedef uint8_t  	uint8;  ///< 8-bit unsigned integer
    typedef uint16_t  	uint16; ///< 16-bit unsigned integer
    typedef uint32_t  	uint32; ///< 32-bit unsigned integer
    typedef uint64_t  	uint64; ///< 64-bit unsigned integer

    /**
     * @brief Define custom data types for signed integers of 8, 16, 32, and 64 bits.
     */
    typedef int8_t  	sint8;  ///< 8-bit signed integer
    typedef int16_t  	sint16; ///< 16-bit signed integer
    typedef int32_t  	sint32; ///< 32-bit signed integer
    typedef int64_t  	sint64; ///< 64-bit signed integer

    typedef float  		float32; ///< 32-bit floating point
    typedef double 	 	float64; ///< 64-bit floating point

    typedef uint8 		Std_Return; ///< Return type, typically used for status codes (e.g., success or error)
} // namespace StdType

namespace Status {
    /**
     * @brief Constants to represent common status values.
     */
    constexpr StdType::uint8 ON = 1; ///< Represent "on" state
    constexpr StdType::uint8 OFF = 0; ///< Represent "off" state

    constexpr StdType::uint8 Std_Active = 1; ///< Represent active state
    constexpr StdType::uint8 Std_Idle = 0; ///< Represent idle state

    constexpr StdType::uint8 Std_High = 1; ///< Represent high state
    constexpr StdType::uint8 Std_Low = 0; ///< Represent low state

    constexpr StdType::Std_Return R_OK = 1; ///< Represent success status
    constexpr StdType::Std_Return R_ERROR = 0; ///< Represent error status
}

namespace BitMath {
    /**
     * @brief Bitwise manipulation functions for modifying bits in registers.
     */

    /**
     * @brief Clear a specific bit in a register.
     * 
     * @param reg The register to modify.
     * @param bit The bit position to clear.
     */
    inline void CLR_BIT(volatile uint8_t &reg, uint8_t bit) {
        reg &= ~(1 << bit);
    }

    /**
     * @brief Set a specific bit in a register.
     * 
     * @param reg The register to modify.
     * @param bit The bit position to set.
     */
    inline void SET_BIT(volatile uint8_t &reg, uint8_t bit) {
        reg |= (1 << bit);
    }

    /**
     * @brief Toggle a specific bit in a register.
     * 
     * @param reg The register to modify.
     * @param bit The bit position to toggle.
     */
    inline void TOG_BIT(volatile uint8_t &reg, uint8_t bit) {
        reg ^= (1 << bit);
    }

    /**
     * @brief Get the value of a specific bit in a register.
     * 
     * @param reg The register to check.
     * @param bit The bit position to check.
     * @return `true` if the bit is set, `false` if it is clear.
     */
    inline bool GET_BIT(volatile uint8_t &reg, uint8_t bit) {
        return (reg >> bit) & 1;
    }
} // namespace BitMath



#endif
