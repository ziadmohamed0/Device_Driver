/**
 * @file std_type.hpp
 * @author Ziad Mohammed Fathy
 * @brief 
 * @version 0.1
 * @date 2025-03-31
 */

#ifndef _LIB_STD_TYPE_HPP_
#define _LIB_STD_TYPE_HPP_

/* ------------ includes ------------ */
#include <stdint.h>

namespace StdType {

    typedef uint8_t  	uint8;
    typedef uint16_t  	uint16;
    typedef uint32_t  	uint32;
    typedef uint64_t  	uint64;

    typedef int8_t  	sint8;
    typedef int16_t	 	sint16;
    typedef int32_t 	sint32;
    typedef int64_t 	sint64;
    typedef int8_t  	sint8;

    typedef float  		float32;
    typedef double 	 	float64;

    typedef uint8 		Std_Return;
} // namespac StdType

namespace Status {
    constexpr StdType::uint8 ON = 1;
    constexpr StdType::uint8 OFF = 0;

    constexpr StdType::uint8 Std_Active = 1;
    constexpr StdType::uint8 Std_Idle = 0;

    constexpr StdType::uint8 Std_High = 1;
    constexpr StdType::uint8 Std_Low = 0;

    constexpr StdType::Std_Return R_OK = 1;
    constexpr StdType::Std_Return R_ERROR = 0;
}

namespace BitMath {
    /**
     * @brief clear bit in register.
     * 
     * @param reg 
     * @param bit 
     */
    inline void CLR_BIT(volatile uint8_t &reg, uint8_t bit) {
        reg &= ~(1 << bit);
    }

    /**
     * @brief set bit in register.
     * 
     * @param reg 
     * @param bit 
     */
    inline void SET_BIT(volatile uint8_t &reg, uint8_t bit) {
        reg |= (1 << bit);
    }

    /**
     * @brief toggle bit in register.
     * 
     * @param reg 
     * @param bit 
     */
    inline void TOG_BIT(volatile uint8_t &reg, uint8_t bit) {
        reg ^= (1 << bit);
    }

    /**
     * @brief Get the bit from register.
     * 
     * @param reg 
     * @param bit 
     */
    inline bool GET_BIT(volatile uint8_t &reg, uint8_t bit) {
        return (reg >> bit) & 1;
    }
} // namespac BitMath

namespace baseAddressesPeripheral {
	constexpr StdType::uint8 TIM2 			= 0x40000000;
	constexpr StdType::uint8 TIM3			= 0x40000400;
	constexpr StdType::uint8 TIM4 			= 0x40000800;
	constexpr StdType::uint8 RTC			= 0x40002800;
	constexpr StdType::uint8 RTC			= 0x40002800;
	constexpr StdType::uint8 WWDG			= 0x40002C00;
	constexpr StdType::uint8 IWDG			= 0x40003000;
	constexpr StdType::uint8 SPI2			= 0x40003800;
	constexpr StdType::uint8 USART2 		= 0x40004400;
	constexpr StdType::uint8 USART3 		= 0x40004800;
	constexpr StdType::uint8 I2C1			= 0x40005400;
	constexpr StdType::uint8 I2C2			= 0x40005800;
	constexpr StdType::uint8 USBreg			= 0x40005C00;
	constexpr StdType::uint8 CAN_USB_SRAM	= 0x40006000;
	constexpr StdType::uint8 bxCAN			= 0x40006400;
	constexpr StdType::uint8 BKP			= 0x40006C00;
	constexpr StdType::uint8 PWR			= 0x40007000;
	constexpr StdType::uint8 AFIO			= 0x40010000;
	constexpr StdType::uint8 EXTI			= 0x40010400;
	constexpr StdType::uint8 PortA			= 0x40010800;
	constexpr StdType::uint8 PortB			= 0x40010C00;
	constexpr StdType::uint8 PortC			= 0x40011000;
	constexpr StdType::uint8 PortD			= 0x40011400;
	constexpr StdType::uint8 PortE			= 0x40011800;
	constexpr StdType::uint8 ADC1			= 0x40012400;
	constexpr StdType::uint8 ADC2			= 0x40012800;
	constexpr StdType::uint8 TIM1			= 0x40012C00;
	constexpr StdType::uint8 SPI1			= 0x40013000;
	constexpr StdType::uint8 USART1			= 0x40013800;
	constexpr StdType::uint8 DMA			= 0x40020000;
	constexpr StdType::uint8 RCC			= 0x40021000;
	constexpr StdType::uint8 Flash			= 0x40022000;
	constexpr StdType::uint8 CRC			= 0x40023000;
}

#endif
